#
# CFN Template you can use when running on ECS.
#
AWSTemplateFormatVersion: 2010-09-09
Description: A-New-Startup - ECS - Creates a-new-startup Service for the ECS Cluster.  Assume the ALB was already created (for speed)
# Used when deploying to ECS
# This is an ECS Service and Task Definition

Parameters:
  
  ImageURI:
    Type: String
    Default: 123456789012.dkr.ecr.region.amazonaws.com/image:tag

  ServiceName:
    Type: String
    # update with the name of the service
    Default: a-new-startup

  ContainerPort:
    Type: Number
    Default: 3000
  
  HealthCheckPath:
    Type: String
    Default: /
    
  Prefix:
    Type: String
    Default: "a-new-startup-ecs"
    Description: "Used for naming of exports. You probably don't want to change this."
    
Resources:

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [/ecs/, !Ref ServiceName, TaskDefinition]]

  # A role needed by ECS Task Definition
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      # No RoleName, we want dynamic, unique names.
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  
  # A role for the containers
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      # No RoleName, we want dynamic/unique role names
      ManagedPolicyArns:
        - Fn::ImportValue: !Join ["-", [ !Ref Prefix, "AppManagedPolicy"]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
            
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref Prefix
    
      # awsvpc required for Fargate
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 0.5GB
      
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Ref ImageURI
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          # The code expects to find these environment variables.
          Environment:
            - Name: APP_TABLE_NAME
              Value:
                Fn::ImportValue:
                  !Join ["-", [ !Ref Prefix, "TableName"]]
            - Name: APP_TOPIC_ARN
              Value: 
                Fn::ImportValue:
                  !Join ["-", [ !Ref Prefix, "TopicArn"]]
            # Feature Flag - code will see this and utilize Xray
            - Name: XRAY
              Value: "ON"
          # Send logs to CloudWatch Logs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
        - Name: XRay
          Image: public.ecr.aws/xray/aws-xray-daemon:latest
          PortMappings:
            - ContainerPort: 2000
          Environment:
            # We have to tell XRay which Region it is in. It won't be able to make calls to IMDS, as it'll be running via Fargate
            - Name: AWS_REGION
              Value: !Ref AWS::Region
          # Send logs to CloudWatch Logs - helpful for troubleshooting any xray daemon issues.
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs-xray
      
  
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', [!Ref ServiceName, ContainerSecurityGroup]]
      VpcId: !ImportValue a-new-startup-ecs-VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !ImportValue a-new-startup-ecs-LoadBalancerSecurityGroup
  
  Service:
    Type: AWS::ECS::Service
    # Need to make sure the ALB is ready first.
    DependsOn:
      - ListenerHTTPS
    Properties: 
      ServiceName: !Ref ServiceName
      Cluster: !ImportValue a-new-startup-ecs-Cluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentController:
        # ECS is in control - NOT CODE_DEPLOY
        Type: ECS
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 2
      HealthCheckGracePeriodSeconds: 30
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          # Running Fargate in PUBLIC subnets.  (OK on ECS, Not OK on EKS)
          Subnets: !Split [',', !ImportValue a-new-startup-ecs-PublicSubnets]
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup
  
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Join ['-', [!Ref ServiceName, TargetGroup]]
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 20 # Make it short for faster demos.
      TargetType: ip
      VpcId: !ImportValue a-new-startup-ecs-VpcId

  
  ListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !ImportValue a-new-startup-ecs-LoadBalancer
      Port: !ImportValue a-new-startup-ecs-LoadBalancerPort
      Protocol: HTTP

Outputs:
  
  TaskDefinition:
    Value: !Ref TaskDefinition
    Export:
      Name: !Join ['-', [!Ref Prefix, 'TaskDefinition']]
      
  TaskRoleArn:
    Value: !GetAtt TaskRole.Arn
    Export:
      Name: !Join ['-', [!Ref Prefix, 'TaskRoleArn']]